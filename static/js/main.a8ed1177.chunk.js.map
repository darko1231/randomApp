{"version":3,"sources":["store/actions/actionTypes.js","store/actions/sorted/sortedTypes.js","hoc/axxx.js","store/actions/movieAction.js","store/actions/sorted/sortedAction.js","store/actions/auth/actions/authAction.js","store/actions/index.js","chunk/asyncChunk.js","App.js","serviceWorker.js","store/reducers/movie.js","store/reducers/sorted.js","store/actions/reducer/authReducer.js","index.js","store/actions/auth/actions/authTypes.js"],"names":["__webpack_require__","d","__webpack_exports__","MOVIE_START","MOVIE_SUCCESS","MOVIE_ERROR","SORTED_START","SORTED_SUCCESS","SORTED_ERROR","aux","props","children","type","actionTypes","Movies","MOVIE_FAIL","error","MOVIE_FETCH","pageNumber","dispatch","axios","get","concat","then","res","fetchMovies","data","results","forEach","el","imageCreate","backdrop_path","push","splice","catch","message","MOVIE_NEWEST","MOVIE_UPCOMING","MOVIE_ACTOR","actorId","firstpageNumber","fetchedResults","poster_path","profile_path","SORTED_FETCH","genreId","sortedType","Sorted","LOAGOUT","localStorage","removeItem","AUTH_SUCCESS","authData","tokenId","AUTH_LOAGOUT_FETCH","AUTH_FETCH","username","password","request_token","setItem","expires_at","AUTH_FAIL","authCheckState","token","getItem","Date","movieAction_MOVIE_FETCH","movieAction_MOVIE_NEWEST","movieAction_MOVIE_UPCOMING","movieAction_MOVIE_ACTOR","sortedAction_SORTED_FETCH","authAction_AUTH_FETCH","asyncChunk","imporComp","_Component","_class2","_getPrototypeOf2","_this","Object","classCallCheck","this","_len","arguments","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","state","component","inherits","createClass","key","value","_this2","setState","default","Component","react_default","a","createElement","AsyncYoutube","AsyncChunk","Promise","all","e","bind","AsyncLayout","AsyncTrailer","AsyncMovie","AyncClicked","AsyncActor","AsyncSorted","AsyncLogin","App","onLogin","RouteContainer","posed","div","enter","y","opacity","delay","transition","stiffness","damping","duration","exit","MovCont","MovieContainer","genreRoutes","react_router","render","_ref","location","react_pose_es","pathname","path","daki","baseRoutes","axxx","_ref2","movie","realBase","exact","loginForm","_ref3","movieRelated","_ref4","youtubeLink","_ref5","connect","auth","loading","onAuthFetch","actions","withRouter","Boolean","window","hostname","match","initialState","movies","reducer","undefined","action","objectSpread","sorted","sortedTypes","actionsType","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","rootReducer","combineReducers","store","createStore","applyMiddleware","thunk","app","es","react_router_dom","basename","src_App_0","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","AUTH_START","AUTH_LOAGOUT"],"mappings":"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","file":"static/js/main.a8ed1177.chunk.js","sourcesContent":["//Exporting movie action types for better reusability\r\nexport const MOVIE_START = \"MOVIE_START\";\r\nexport const MOVIE_SUCCESS = \"MOVIE_SUCCESS\";\r\nexport const MOVIE_ERROR = \"MOVIE_ERROR\";\r\nexport const MOVIE_FETCH = \"MOVIE_FETCH\";","//Exporting action types for better reusability\r\nexport const SORTED_START = \"SORTED_START\";\r\nexport const SORTED_SUCCESS = \"SORTED_SUCCESS\";\r\nexport const SORTED_ERROR = \"SORTED_ERROR\";\r\nexport const SORTED_FETCH = \"SORTED_FETCH\";\r\n","//Creating Aux component for better reusability instead of React.Fragment\r\nconst aux = (props) => props.children;\r\n\r\nexport default aux;\r\n","import * as actionTypes from \"./actionTypes\";\r\nimport axios from \"axios\";\r\n\r\nexport const MOVIE_START = () => {\r\n  return {\r\n    type: actionTypes.MOVIE_START,\r\n  };\r\n};\r\n\r\nexport const MOVIE_SUCCESS = (Movies) => {\r\n  return {\r\n    type: actionTypes.MOVIE_SUCCESS,\r\n    Movies: Movies,\r\n  };\r\n};\r\n\r\nexport const MOVIE_FAIL = (error) => {\r\n  return {\r\n    type: actionTypes.MOVIE_ERROR,\r\n    error: error,\r\n  };\r\n};\r\n//Fetching movies from tmdb API and storing them into fetchMovies Array.\r\nexport const MOVIE_FETCH = (pageNumber) => {\r\n  return (dispatch) => {\r\n    dispatch(MOVIE_START());\r\n\r\n    let key = \"a1e70815ed514d294dc936b2f74a2ef3\";\r\n\r\n    axios\r\n      .get(\r\n        `https://api.themoviedb.org/3/discover/movie?api_key=${key}&include_video=true&page=${pageNumber}`\r\n      )\r\n      .then((res) => {\r\n        let fetchMovies = [];\r\n        const results = res.data.results;\r\n\r\n        results.forEach((el) => {\r\n          el.imageCreate =\r\n            \"https://image.tmdb.org/t/p/original\" + el.backdrop_path;\r\n\r\n          fetchMovies.push(el);\r\n        });\r\n\r\n        fetchMovies.splice(0, 4);\r\n        //After storing fetched movies in Array I dispatch success action and passing fetchMovies data as parameter\r\n        dispatch(MOVIE_SUCCESS(fetchMovies));\r\n      })\r\n      .catch((error) => {\r\n        dispatch(MOVIE_FAIL(error.message));\r\n      });\r\n  };\r\n};\r\n\r\n//Fetching newest movies and storing data in fetchMovies array. After that dispatching success action with array as parameter\r\nexport const MOVIE_NEWEST = (pageNumber) => {\r\n  return (dispatch) => {\r\n    dispatch(MOVIE_START());\r\n    let key = \"a1e70815ed514d294dc936b2f74a2ef3\";\r\n\r\n    axios\r\n      .get(\r\n        `https://api.themoviedb.org/3/movie/popular?api_key=${key}&language=en-US&page=${pageNumber}`\r\n      )\r\n      .then((res) => {\r\n        let fetchMovies = [];\r\n        const results = res.data.results;\r\n\r\n        results.forEach((el) => {\r\n          //Creation of new variable which includes images of each movie\r\n          el.imageCreate =\r\n            \"https://image.tmdb.org/t/p/original\" + el.backdrop_path;\r\n\r\n          fetchMovies.push(el);\r\n        });\r\n        fetchMovies.splice(0, 4);\r\n        dispatch(MOVIE_SUCCESS(fetchMovies));\r\n      })\r\n      .catch((error) => {\r\n        dispatch(MOVIE_FAIL(error.message));\r\n      });\r\n  };\r\n};\r\n//Fetching upcoming movies using TMDB api\r\nexport const MOVIE_UPCOMING = (pageNumber) => {\r\n  return (dispatch) => {\r\n    dispatch(MOVIE_START());\r\n    let key = \"a1e70815ed514d294dc936b2f74a2ef3\";\r\n\r\n    axios\r\n      .get(\r\n        `https://api.themoviedb.org/3/movie/upcoming?api_key=${key}&language=en-US&page=${pageNumber}`\r\n      )\r\n      .then((res) => {\r\n        let fetchMovies = [];\r\n        const results = res.data.results;\r\n\r\n        results.forEach((el) => {\r\n          //Creation of new variable which includes images of each movie\r\n          el.imageCreate =\r\n            \"https://image.tmdb.org/t/p/original\" + el.backdrop_path;\r\n\r\n          fetchMovies.push(el);\r\n        });\r\n\r\n        fetchMovies.splice(0, 4);\r\n        dispatch(MOVIE_SUCCESS(fetchMovies));\r\n      })\r\n      .catch((error) => {\r\n        dispatch(MOVIE_FAIL(error.message));\r\n      });\r\n  };\r\n};\r\n\r\n//When clicking on movie fetching data from that movie based on ID which shows in URL when movie is clicked\r\nexport const MOVIE_ID = (id) => {\r\n  return (dispatch) => {\r\n    //First dispatching start action\r\n    dispatch(MOVIE_START());\r\n    let key = \"a1e70815ed514d294dc936b2f74a2ef3\";\r\n\r\n    axios\r\n      .get(`http://api.themoviedb.org/3/movie/${id}?api_key=${key}`)\r\n      .then((res) => {\r\n        let fetchMovies = [];\r\n        const results = res.data.results;\r\n\r\n        results.forEach((el) => {\r\n          el.imageCreate =\r\n            \"https://image.tmdb.org/t/p/original\" + el.backdrop_path;\r\n\r\n          fetchMovies.push(el);\r\n        });\r\n\r\n        fetchMovies.splice(6, 5);\r\n        //After clicked movie has been fetched by its Id, we dispatch success action with array as parameter inside of setTimeout function which includes 1.5 seconds timer before invoking function\r\n\r\n        setTimeout(() => {\r\n          dispatch(MOVIE_SUCCESS(fetchMovies));\r\n        }, 1500);\r\n      })\r\n      .catch((error) => {\r\n        dispatch(MOVIE_FAIL(error.message));\r\n      });\r\n  };\r\n};\r\n// Fetching movies of an clicked actor based on its ID\r\nexport const MOVIE_ACTOR = (actorId, firstpageNumber) => {\r\n  return (dispatch) => {\r\n    let key = \"a1e70815ed514d294dc936b2f74a2ef3\";\r\n    axios\r\n      .get(\r\n        `http://api.themoviedb.org/3/discover/movie?with_cast=${actorId}&sort_by=release_date.asc&api_key=${key}&page=${firstpageNumber}`\r\n      )\r\n      .then((res) => {\r\n        let fetchedResults = [];\r\n\r\n        let results = res.data.results;\r\n\r\n        results.forEach((el) => {\r\n          //Creating poster of each movie in a reusable way\r\n          el.poster_path =\r\n            \"https://image.tmdb.org/t/p/original\" + el.poster_path;\r\n\r\n          fetchedResults.push(el);\r\n          //Storing all of the fetched results (el) inside of fetchedResults array\r\n        });\r\n\r\n        fetchedResults.splice(0, 8);\r\n        //Creating profile of each movie in a reusable way\r\n        results.profile_path =\r\n          \"https://image.tmdb.org/t/p/original\" + results.profile_path;\r\n\r\n        dispatch(MOVIE_SUCCESS(fetchedResults));\r\n      })\r\n      .catch((error) => {\r\n        dispatch(MOVIE_FAIL(error.message));\r\n      });\r\n  };\r\n};\r\n","import * as sortedType from \"./sortedTypes\";\r\nimport axios from \"axios\";\r\n\r\n//Defining start action of sorting movies with a reusable type\r\nexport const SORTED_START = () => {\r\n  return {\r\n    type: sortedType.SORTED_START,\r\n  };\r\n};\r\n\r\n//Defining success action of sorting movies with a reusable type with a parameter of Sorted data that will be later fetched\r\nexport const SORTED_SUCCESS = (Sorted) => {\r\n  return {\r\n    type: sortedType.SORTED_SUCCESS,\r\n    Sorted: Sorted,\r\n  };\r\n};\r\n\r\n//Defining error action of sorting movies with a reusable type\r\nexport const SORTED_ERROR = (error) => {\r\n  return {\r\n    type: sortedType.SORTED_ERROR,\r\n    error: error,\r\n  };\r\n};\r\n\r\n//Fetching movies based on pageNumber and genre\r\nexport const SORTED_FETCH = (pageNumber, genreId) => {\r\n  return (dispatch) => {\r\n    //Starting action of fetching\r\n    dispatch(SORTED_START());\r\n\r\n    let key = \"a1e70815ed514d294dc936b2f74a2ef3\";\r\n\r\n    axios\r\n      .get(\r\n        `https://api.themoviedb.org/3/discover/movie?api_key=${key}&language=en-US&sort_by=popularity.desc&include_adult=false&include_video=false&page=1&primary_release_date.gte=1990-01-01&primary_release_date.lte=2024-07-20&vote_average.gte=6&with_genres=${genreId}&page=${pageNumber}`\r\n      )\r\n      .then((res) => {\r\n        let fetchMovies = [];\r\n        const results = res.data.results;\r\n        results.forEach((el) => {\r\n          el.imageCreate =\r\n            \"https://image.tmdb.org/t/p/original\" + el.backdrop_path;\r\n\r\n          fetchMovies.push(el);\r\n        });\r\n\r\n        fetchMovies.splice(1, 10);\r\n        //Succesfully fetched movies using TMDB API and my api key from any given pageNumber and genre. Then succesfully storing that data and dispatching success action.\r\n\r\n        dispatch(SORTED_SUCCESS(fetchMovies));\r\n      })\r\n      .catch((error) => {\r\n        //Fetching failure and dispatching error function\r\n        dispatch(SORTED_ERROR(error.message));\r\n      });\r\n  };\r\n};\r\n","import * as actionTypes from \"./authTypes\";\r\nimport axios from \"axios\";\r\n\r\n//Creating and exporting authentification actions for use in our reducer.\r\n\r\nexport const AUTH_START = () => {\r\n  return {\r\n    type: actionTypes.AUTH_START,\r\n  };\r\n};\r\n//Removing our identification token and expiration date from local storage when clicking logout button\r\nexport const LOAGOUT = () => {\r\n  localStorage.removeItem(\"token\");\r\n  localStorage.removeItem(\"expirationDate\");\r\n  return {\r\n    type: actionTypes.AUTH_LOAGOUT,\r\n  };\r\n};\r\n\r\nexport const AUTH_SUCCESS = (authData) => {\r\n  return {\r\n    type: actionTypes.AUTH_SUCCESS,\r\n    tokenId: authData,\r\n  };\r\n};\r\n\r\nexport const AUTH_FAIL = (error) => {\r\n  return {\r\n    type: actionTypes.AUTH_FAIL,\r\n    error: error,\r\n  };\r\n};\r\n//Dispatching invoked Logout action, meaning when clicked on logout token and expiration date will be removed from storage\r\nexport const AUTH_LOAGOUT_FETCH = () => {\r\n  return (dispatch) => {\r\n    dispatch(LOAGOUT());\r\n  };\r\n};\r\n//First I invoke authentification start action then fetching my token and expiration date using TMDB API and my key. After fetching I store this data in Local Storage\r\nexport const AUTH_FETCH = (username, password) => {\r\n  return (dispatch) => {\r\n    dispatch(AUTH_START());\r\n\r\n    let key = \"a1e70815ed514d294dc936b2f74a2ef3\";\r\n    axios\r\n      .get(\r\n        `https://api.themoviedb.org/3/authentication/token/new?api_key=${key}`\r\n      )\r\n      .then((res) => {\r\n        dispatch(AUTH_SUCCESS(res.data.request_token));\r\n        localStorage.setItem(\"token\", res.data.request_token);\r\n        localStorage.setItem(\"expirationDate\", res.data.expires_at);\r\n      })\r\n      .catch((error) => {\r\n        dispatch(AUTH_FAIL(error));\r\n      });\r\n  };\r\n};\r\n//First checking my authentifation state by saying if token does not exist in local storage then invoke logout action.\r\nexport const authCheckState = () => {\r\n  return (dispatch) => {\r\n    const token = localStorage.getItem(\"token\");\r\n\r\n    if (!token) {\r\n      dispatch(LOAGOUT());\r\n    } else {\r\n      const expirationDate = localStorage.getItem(\"expirationDate\");\r\n      //If today date is bigger than expiration date of token, then of course I must invoke logout action, otherwise keep myself logged in\r\n      if (expirationDate < new Date()) {\r\n        dispatch(LOAGOUT());\r\n      } else {\r\n        dispatch(AUTH_SUCCESS(token));\r\n      }\r\n    }\r\n  };\r\n};\r\n","//Exporting all of the actions for manipulation data and authentification that are needed for this application\r\nexport {\r\n  MOVIE_FETCH,\r\n  MOVIE_NEWEST,\r\n  MOVIE_UPCOMING,\r\n  MOVIE_ID,\r\n  MOVIE_ACTOR,\r\n} from \"./movieAction\";\r\n\r\nexport { SORTED_FETCH } from \"./sorted/sortedAction\";\r\n\r\nexport {\r\n  AUTH_FETCH,\r\n  AUTH_LOAGOUT_FETCH,\r\n  authCheckState,\r\n} from \"./auth/actions/authAction\";\r\n\r\n","import React, { Component } from \"react\";\r\n\r\n//Splitting Async API into multiple parts then reusing it as a <Route> Component in main App file\r\nconst asyncChunk = (imporComp) => {\r\n  return class extends Component {\r\n    state = {\r\n      component: null,\r\n    };\r\n\r\n    componentDidMount() {\r\n      imporComp().then((el) => {\r\n        this.setState({ component: el.default });\r\n      });\r\n    }\r\n\r\n    render() {\r\n      const Component = this.state.component;\r\n\r\n      return Component ? <Component {...this.props} /> : null;\r\n    }\r\n  };\r\n};\r\n\r\nexport default asyncChunk;\r\n","import React, { Component } from \"react\";\nimport AsyncChunk from \"./chunk/asyncChunk\";\nimport \"./App.css\";\nimport Aux from \"./hoc/axxx\";\nimport { Route } from \"react-router-dom\";\nimport * as actions from \"./store/actions/index\";\nimport { connect } from \"react-redux\";\nimport { withRouter } from \"react-router\";\nimport { Switch } from \"react-router\";\nimport posed, { PoseGroup } from \"react-pose\";\n\n//Importing small reusable chunks of async components based on fetched movie or auth data\nconst AsyncYoutube = AsyncChunk(() => {\n  return import(\"./containers/Youtube/Youtube\");\n});\n\nconst AsyncLayout = AsyncChunk(() => {\n  return import(\"./components/Layout/Layout\");\n});\n\nconst AsyncTrailer = AsyncChunk(() => {\n  return import(\"./containers/Trailer/Trailer\");\n});\n\nexport const AsyncMovie = AsyncChunk(() => {\n  return import(\"./containers/Movie/Movie\");\n});\n\nconst AyncClicked = AsyncChunk(() => {\n  return import(\"./containers/tclickedMovie/ClickedMovie\");\n});\n\nconst AsyncActor = AsyncChunk(() => {\n  return import(\"./containers/clickedActor/ClickedActor\");\n});\n\nconst AsyncSorted = AsyncChunk(() => {\n  return import(\"./containers/SortedBy/SortedBy\");\n});\n\nconst AsyncLogin = AsyncChunk(() => import(\"./containers/LogIn/Login\"));\n\nclass App extends Component {\n  componentDidMount() {\n    this.props.onLogin();\n  }\n\n  render() {\n    //Creating animation for each container of components from entering position to exit\n\n    const RouteContainer = posed.div({\n      enter: {\n        y: 0,\n        opacity: 1,\n        delay: 300,\n        transition: {\n          y: { type: \"spring\", stiffness: 1000, damping: 15 },\n          default: { duration: 300 },\n        },\n      },\n      exit: {\n        y: 0,\n        opacity: 0,\n        transition: { duration: 150 },\n      },\n    });\n\n    const MovCont = posed.div({\n      enter: {\n        y: 0,\n        opacity: 1,\n        delay: 400,\n        transition: {\n          y: { type: \"spring\", stiffness: 1000, damping: 15 },\n          default: { duration: 300 },\n        },\n      },\n      exit: {\n        y: 0,\n        opacity: 0,\n        transition: { duration: 150 },\n      },\n    });\n\n    const MovieContainer = posed.div({\n      enter: { y: 0, opacity: 1, duration: 1000 },\n      exit: { y: 0, opacity: 0 },\n    });\n    //Creating React routes of all genres available in navigation menu. After clicking on genre type, Async action will be dispatched, path of URL will be changed and  fetching of desired data will finish\n    let genreRoutes = (\n      <div>\n        <Route\n          render={({ location }) => (\n            <PoseGroup>\n              <RouteContainer key={location.pathname}>\n                <Switch location={location}>\n                  <Route\n                    path=\"/action\"\n                    render={() => <AsyncSorted daki={\"action\"} />}\n                  />\n                  <Route\n                    path=\"/horror\"\n                    render={() => <AsyncSorted daki={\"horror\"} />}\n                  />\n                  <Route\n                    path=\"/comedy\"\n                    render={() => <AsyncSorted daki={\"comedy\"} />}\n                  />\n                  <Route\n                    path=\"/drama\"\n                    render={() => <AsyncSorted daki={\"drama\"} />}\n                  />\n                  <Route\n                    path=\"/fantasy\"\n                    render={() => <AsyncSorted daki={\"fantasy\"} />}\n                  />\n                  <Route\n                    path=\"/romance\"\n                    render={() => <AsyncSorted daki={\"romance\"} />}\n                  />\n                  <Route\n                    path=\"/crime\"\n                    render={() => <AsyncSorted daki={\"crime\"} />}\n                  />\n                  <Route\n                    path=\"/adventure\"\n                    render={() => <AsyncSorted daki={\"adventure\"} />}\n                  />\n                </Switch>\n              </RouteContainer>\n            </PoseGroup>\n          )}\n        ></Route>\n      </div>\n    );\n    //Creation of base routes in navigation menu which includes most watched and upcoming movies. After clicking path is changed and dispatching starts\n    let baseRoutes = (\n      <Aux>\n        <Route\n          render={({ location }) => (\n            <PoseGroup>\n              <RouteContainer key={location.pathname}>\n                <Switch location={location}>\n                  <Route\n                    path=\"/most-watched\"\n                    render={() => <AsyncMovie movie=\"most-watched\" />}\n                  />\n                  <Route\n                    path=\"/upcoming-movies\"\n                    render={() => <AsyncMovie movie=\"upcoming-movies\" />}\n                  />\n                </Switch>\n              </RouteContainer>\n            </PoseGroup>\n          )}\n        ></Route>\n      </Aux>\n    );\n\n    //\n    let realBase = (\n      <div>\n        <Route exact path=\"/\" component={AsyncLayout} />\n        <Route exact path={`/`} component={AsyncTrailer} />\n        <Route path=\"/\" exact render={() => <AsyncMovie movie=\"regular\" />} />\n      </div>\n    );\n\n    let loginForm = (\n      <Route\n        render={({ location }) => (\n          <PoseGroup>\n            <RouteContainer key={location.pathname}>\n              <Switch location={location}>\n                <Route exact path={`/login`} component={AsyncLogin} />\n              </Switch>\n            </RouteContainer>\n          </PoseGroup>\n        )}\n      ></Route>\n    );\n\n    let movieRelated = (\n      <div>\n        <Route\n          render={({ location }) => (\n            <PoseGroup>\n              <MovCont key={location.pathname}>\n                <Switch location={location}>\n                  <Route\n                    path={`/movie/:imdId`}\n                    render={() => <AyncClicked />}\n                  />\n                  <Route\n                    path={`/actors/:actorId`}\n                    render={() => <AsyncActor />}\n                  />\n                </Switch>\n              </MovCont>\n            </PoseGroup>\n          )}\n        ></Route>\n      </div>\n    );\n    let youtubeLink = (\n      <Route\n        render={({ location }) => (\n          <PoseGroup>\n            <MovieContainer key={location.pathname}>\n              <Switch location={location}>\n                <Route\n                  exact\n                  path={`/movie/:imdId/trailer`}\n                  component={AsyncYoutube}\n                />\n              </Switch>\n            </MovieContainer>\n          </PoseGroup>\n        )}\n      ></Route>\n    );\n\n    return (\n      <Aux>\n        {realBase}\n        {baseRoutes}\n\n        {loginForm}\n\n        {youtubeLink}\n\n        {movieRelated}\n\n        {genreRoutes}\n      </Aux>\n    );\n  }\n}\n//Passing state using props property of React. State includes token which recieved true or false based if token exists or not, loading phase and error\nconst stateWithProps = (state) => {\n  return {\n    token: state.auth.token !== null,\n    loading: state.auth.loading,\n    error: state.auth.error,\n  };\n};\n\n//Passing authentification dispatch functions and its needed parameters\n\nconst stateDispatchToProps = (dispatch) => {\n  return {\n    onAuthFetch: (username, password) =>\n      dispatch(actions.AUTH_FETCH(username, password)),\n    onLogin: () => dispatch(actions.authCheckState()),\n  };\n};\n\nexport default connect(\n  stateWithProps,\n  stateDispatchToProps\n)(withRouter(App));\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as actionTypes from \"../actions/actionTypes\";\r\n\r\n//Creating initial state of potential fetched movies\r\nconst initialState = {\r\n  movies: [],\r\n  loading: false,\r\n  error: false,\r\n};\r\n\r\n//Specifing how state gets updated from starting phase during fetching using API to receiving and storing fetched data in our movies Array.\r\nexport const reducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case actionTypes.MOVIE_START: {\r\n      return {\r\n        ...state,\r\n        loading: true,\r\n        error: false,\r\n      };\r\n    }\r\n\r\n    case actionTypes.MOVIE_SUCCESS: {\r\n      return {\r\n        movies: action.Movies,\r\n        loading: false,\r\n        error: false,\r\n      };\r\n    }\r\n\r\n    case actionTypes.MOVIE_ERROR: {\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        error: action.error,\r\n      };\r\n    }\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default reducer;\r\n","import * as sortedTypes from \"../actions/sorted/sortedTypes\";\r\n//Initial state of sorted movies\r\nconst initialState = {\r\n  sorted: [],\r\n  loading: false,\r\n  error: false,\r\n};\r\n\r\n//Specifing how state gets updated with each aadditional step, then receiving data and stopping loading phase if data has been fetched succesfully to our Array.\r\nexport const reducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case sortedTypes.SORTED_START: {\r\n      return {\r\n        ...state,\r\n        loading: true,\r\n        error: false,\r\n      };\r\n    }\r\n\r\n    case sortedTypes.SORTED_SUCCESS: {\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        error: false,\r\n        sorted: action.Sorted,\r\n      };\r\n    }\r\n\r\n    case sortedTypes.SORTED_ERROR: {\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        error: action.error,\r\n      };\r\n    }\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default reducer;\r\n","import * as actionsType from \"../auth/actions/authTypes\";\r\nconst initialState = {\r\n  token: null,\r\n  loading: false,\r\n  error: false,\r\n};\r\n\r\nconst reducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case actionsType.AUTH_START: {\r\n      return {\r\n        ...state,\r\n        token: null,\r\n        loading: true,\r\n        error: false,\r\n      };\r\n    }\r\n\r\n    case actionsType.AUTH_SUCCESS: {\r\n      return {\r\n        ...state,\r\n        token: action.tokenId,\r\n        loading: false,\r\n        error: false,\r\n      };\r\n    }\r\n\r\n    case actionsType.AUTH_FAIL: {\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        error: action.error,\r\n      };\r\n    }\r\n\r\n    case actionsType.AUTH_LOAGOUT: {\r\n      return {\r\n        ...state,\r\n        token: null,\r\n        loading: false,\r\n        error: false,\r\n      };\r\n    }\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default reducer;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { createStore, applyMiddleware, compose, combineReducers } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport thunk from \"redux-thunk\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport reducer from \"./store/reducers/movie.js\";\nimport sorted from \"./store/reducers/sorted\";\nimport auth from \"./store/actions/reducer/authReducer\";\nimport { BrowserRouter } from \"react-router-dom\";\n\n//Configuration of Redux store to be able access global state\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst rootReducer = combineReducers({\n  movie: reducer,\n  sorted: sorted,\n  auth: auth,\n});\n\n//Creation of redux store and usage of redux thunk as a middleware for dispatching and getting state\nconst store = createStore(\n  rootReducer,\n  composeEnhancers(applyMiddleware(thunk))\n);\n\nconst app = (\n  <Provider store={store}>\n    <BrowserRouter basename=\"/\">\n      <App />\n    </BrowserRouter>\n  </Provider>\n);\n\nReactDOM.render(app, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","//Exporting each authentification action and type due to better reusability\r\nexport const AUTH_START = \"AUTH_START\";\r\nexport const AUTH_SUCCESS = \"AUTH_SUCCESS\";\r\nexport const AUTH_FAIL = \"AUTH_FAIL\";\r\nexport const AUTH_FETCH = \"AUTH_FETCH\";\r\nexport const AUTH_LOAGOUT = \"AUTH_LOAGOUT\";\r\n"],"sourceRoot":""}