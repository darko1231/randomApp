{"version":3,"sources":["components/LoginComp/Input/Input.js","components/LoginComp/LoginComp.js","containers/LogIn/Login.js"],"names":["Input","props","inputType","allClasses","classes","inputpass","inputemail","invalid","isTouched","push","Invalid","elementType","react_default","a","createElement","Object","assign","className","join","elementConfig","value","onChange","changed","axxx","welcome","fa_index_esm","welcomeIcon","index_esm","loginIcon","inputfocus","loginKey","inputfocuspass","Logincomp","state","loginForm","email","placeholder","type","validation","required","contains","valid","touched","password","minLength","formValid","inputChangeHandler","id","event","preventDefault","updatedForm","objectSpread","_this","updatedAll","target","checkValidity","formIsValid","setState","submitHandler","loading","react_loader_spinner","loader","color","height","width","setTimeout","onAuthFetch","prevstate","window","location","href","rules","isValid","trim","length","includes","_this2","this","form","input","config","LoginComp","LoginForm","onSubmit","loginHeader","map","el","LoginComp_Input_Input","key","disabled","loginbtn","loginspan","token","Component","connect","auth","error","dispatch","username","actions","withRouter","Login","nextProps","nextState","children","LoginComp_LoginComp"],"mappings":"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","file":"static/js/13.ebb06bb8.chunk.js","sourcesContent":["import React from \"react\";\r\nimport Aux from \"../../../hoc/axxx\";\r\nimport classes from \"../Input/Input.css\";\r\nimport { IoIosPerson, IoIosKey } from \"react-icons/io\";\r\nimport { FaKickstarter } from \"react-icons/fa\";\r\n\r\n//Creation of reusable Input component using switch method if there is a 'input' value or not\r\nconst Input = (props) => {\r\n  let inputType = null;\r\n  let allClasses = [classes.inputpass, classes.inputemail];\r\n\r\n  if (props.invalid && props.isTouched) {\r\n    allClasses.push(classes.Invalid);\r\n  }\r\n  switch (props.elementType) {\r\n    case \"input\":\r\n      inputType = (\r\n        <input\r\n          className={allClasses.join(\" \")}\r\n          {...props.elementConfig}\r\n          value={props.value}\r\n          onChange={props.changed}\r\n        ></input>\r\n      );\r\n\r\n      break;\r\n\r\n    default: {\r\n      inputType = null;\r\n    }\r\n  }\r\n  return (\r\n    <Aux>\r\n      <span className={classes.welcome}>\r\n        <FaKickstarter className={classes.welcomeIcon} />\r\n      </span>\r\n      <IoIosPerson className={classes.loginIcon} />\r\n      <span className={classes.inputfocus}></span>\r\n      {inputType}\r\n      <IoIosKey className={classes.loginKey} />\r\n      <span className={classes.inputfocuspass}></span>\r\n    </Aux>\r\n  );\r\n};\r\n\r\nexport default Input;\r\n","import React, { Component } from \"react\";\r\nimport classes from \"./LoginComp.css\";\r\nimport Input from \"./Input/Input\";\r\nimport Aux from \"../../hoc/axxx\";\r\nimport * as actions from \"../../store/actions/index\";\r\nimport { connect } from \"react-redux\";\r\nimport { withRouter } from \"react-router\";\r\nimport { Loader } from \"react-loader-spinner\";\r\n//Forming of Login state and its data including validation of its inputs in order to be submitted properly\r\nclass Logincomp extends Component {\r\n  state = {\r\n    loginForm: {\r\n      email: {\r\n        elementType: \"input\",\r\n        elementConfig: {\r\n          placeholder: \"Your email\",\r\n          type: \"email\",\r\n        },\r\n        value: \"\",\r\n        validation: {\r\n          required: true,\r\n          contains: \"@\",\r\n        },\r\n        valid: false,\r\n        touched: false,\r\n      },\r\n      password: {\r\n        elementType: \"input\",\r\n        elementConfig: {\r\n          placeholder: \"Your password\",\r\n          type: \"password\",\r\n        },\r\n        value: \"\",\r\n        validation: {\r\n          required: true,\r\n          minLength: 5,\r\n        },\r\n        valid: false,\r\n        touched: false,\r\n      },\r\n    },\r\n    formValid: false,\r\n  };\r\n  //Function checks true or false for validity of input we are using which can be reused in later functions\r\n  checkValidity(value, rules) {\r\n    let isValid = true;\r\n\r\n    if (rules.required) {\r\n      isValid = value.trim() !== \"\" && isValid;\r\n    }\r\n\r\n    if (rules.minLength) {\r\n      isValid = value.length >= rules.minLength && isValid;\r\n    }\r\n\r\n    if (rules.contains) {\r\n      isValid = value.includes(rules.contains) && isValid;\r\n    }\r\n\r\n    return isValid;\r\n  }\r\n  //Taking value of an input with each change then checkind validity of that value by using previous function. Finally, storing updated data in state\r\n  inputChangeHandler = (id, event) => {\r\n    event.preventDefault();\r\n    const updatedForm = {\r\n      ...this.state.loginForm,\r\n    };\r\n\r\n    const updatedAll = {\r\n      ...updatedForm[id],\r\n    };\r\n\r\n    updatedAll.value = event.target.value;\r\n    updatedAll.valid = this.checkValidity(\r\n      updatedAll.value,\r\n      updatedAll.validation\r\n    );\r\n\r\n    updatedForm[id] = updatedAll;\r\n    updatedAll.touched = true;\r\n\r\n    let formIsValid = true;\r\n\r\n    for (let formValid in updatedForm) {\r\n      formIsValid = updatedForm[formValid].valid && formIsValid;\r\n    }\r\n\r\n    this.setState({ loginForm: updatedForm, formValid: formIsValid });\r\n  };\r\n  //Function which invokes when submit button is pressed, checks if loading state is still on, if not it uses validated input values and login process has been started\r\n  submitHandler = (event) => {\r\n    event.preventDefault();\r\n\r\n    if (this.props.loading) {\r\n      return (\r\n        <Loader\r\n          className={classes.loader}\r\n          type=\"Puff\"\r\n          color=\"#fff\"\r\n          height=\"200\"\r\n          width=\"200\"\r\n        />\r\n      );\r\n    }\r\n    setTimeout(() => {\r\n      this.props.onAuthFetch(\r\n        this.state.loginForm.email.value,\r\n        this.state.loginForm.password.value\r\n      );\r\n      this.setState((prevstate) => {\r\n        return (\r\n          (prevstate.loginForm.email.value = \"\"),\r\n          (prevstate.loginForm.password.value = \"\")\r\n        );\r\n      });\r\n    }, 1000);\r\n\r\n    setTimeout(() => {\r\n      window.location.href = `http://localhost:3000/`;\r\n    }, 1500);\r\n  };\r\n\r\n  render() {\r\n    let form = [];\r\n    for (let input in this.state.loginForm) {\r\n      form.push({\r\n        id: input,\r\n        config: this.state.loginForm[input],\r\n      });\r\n    }\r\n\r\n    return (\r\n      <Aux>\r\n        <div className={classes.LoginComp}>\r\n          <form className={classes.LoginForm} onSubmit={this.submitHandler}>\r\n            <h2 className={classes.loginHeader}>Login</h2>\r\n            {form.map((el) => {\r\n              return (\r\n                <Input\r\n                  isTouched={el.config.touched}\r\n                  invalid={!el.config.valid}\r\n                  key={el.id}\r\n                  elementType={el.config.elementType}\r\n                  elementConfig={el.config.elementConfig}\r\n                  value={el.config.value}\r\n                  changed={(event) => this.inputChangeHandler(el.id, event)}\r\n                />\r\n              );\r\n            })}\r\n            <button\r\n              disabled={!this.state.formValid}\r\n              className={classes.loginbtn}\r\n            >\r\n              <span className={classes.loginspan}>\r\n                {this.props.token !== null ? \"Loagout\" : \"Login\"}\r\n              </span>\r\n            </button>\r\n          </form>\r\n        </div>\r\n      </Aux>\r\n    );\r\n  }\r\n}\r\n//Passing state using props property of React. State includes token, loading phase and error\r\n\r\nconst stateWithProps = (state) => {\r\n  return {\r\n    token: state.auth.token,\r\n    loading: state.auth.loading,\r\n    error: state.auth.error,\r\n  };\r\n};\r\n//Passing authentification dispatch function and its needed parameters\r\n\r\nconst stateDispatchToProps = (dispatch) => {\r\n  return {\r\n    onAuthFetch: (username, password) =>\r\n      dispatch(actions.AUTH_FETCH(username, password)),\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  stateWithProps,\r\n  stateDispatchToProps\r\n)(withRouter(Logincomp));\r\n","import React, { Component } from \"react\";\r\nimport classes from \"./Login.css\";\r\nimport LoginComp from \"../../components/LoginComp/LoginComp\";\r\n//Login container represented as a parent that includes Login Component with its own CSS styles\r\nclass Login extends Component {\r\n  shouldComponentUpdate(nextProps, nextState) {\r\n    if (nextProps.children !== nextState.children) {\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className={classes.Login}>\r\n        <LoginComp />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Login;\r\n"],"sourceRoot":""}