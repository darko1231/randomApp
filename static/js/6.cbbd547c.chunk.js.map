{"version":3,"sources":["components/YoutubeComp/YoutubeComp.js","containers/Youtube/Youtube.js"],"names":["YoutubeComp","props","react_default","a","createElement","className","classes","title","dare","src","url","allowFullScreen","allow","frameBorder","Youtube","state","fetchedVideos","youtubeExist","clicking","_this","history","goBack","care","id","axios","get","concat","then","res","fetchMovies","results","data","videos","map","el","youtube","youtubeFull","key","push","setState","video","catch","error","console","log","nextProps","nextState","this","match","params","imdId","_this2","onClick","components_YoutubeComp_YoutubeComp","index_esm","bind","icon","youtubeNotExisting","youtspan","Component","withRouter"],"mappings":"6OAmBeA,EAfK,SAACC,GACnB,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAQN,aACtBE,EAAAC,EAAAC,cAAA,UACEG,MAAM,UACNF,UAAWC,IAAQE,KACnBC,IAAKR,EAAMS,IACXC,gBAAgB,kBAChBC,MAAM,WACNC,YAAY,uCCNdC,6MAEJC,MAAQ,CACNC,cAAe,GACfC,cAAc,KAehBC,SAAW,WACTC,EAAKlB,MAAMmB,QAAQC,YAGrBC,KAAO,SAACC,GAENC,IACGC,IADH,sCAAAC,OAE0CH,EAF1C,aAAAG,OADU,mCACV,oEAIGC,KAAK,SAACC,GACL,IAAIC,EAAc,GACdC,EAAUF,EAEdE,EAAQC,KAAKC,OAAOF,QAAQG,IAAI,SAACC,GAC/B,OAAQJ,EAAQK,QAAUD,IAG5BJ,EAAQM,YACN,iCAAmCN,EAAQK,QAAQE,IAErDR,EAAYS,KAAKR,GAGjBX,EAAKoB,SAAS,CACZvB,cAAea,EACfZ,cAAcY,EAAY,GAAGE,KAAKS,UAGrCC,MAAM,SAACC,GACNC,QAAQC,IAAIF,2FA1CIG,EAAWC,GAC/B,OAAID,EAAU5B,eAAiB6B,EAAU7B,yDAQzC8B,KAAKzB,KAAKyB,KAAK9C,MAAM+C,MAAMC,OAAOC,wCAqC3B,IAAAC,EAAAJ,KACP,OAAOA,KAAKhC,MAAME,aAChBf,EAAAC,EAAAC,cAAA,OAAKgD,QAAS,kBAAMD,EAAKjC,YAAYb,UAAWC,IAAQQ,SACrDiC,KAAKhC,MAAMC,cAAciB,IAAI,SAACC,GAC7B,OAAOhC,EAAAC,EAAAC,cAACiD,EAAD,CAAahB,IAAKH,EAAIxB,IAAKwB,EAAGE,gBAEvClC,EAAAC,EAAAC,cAACkD,EAAA,EAAD,CACEF,QAAS,kBAAMD,EAAKjC,SAASqC,KAAKJ,IAClC9C,UAAWC,IAAQkD,QAIvBtD,EAAAC,EAAAC,cAAA,OAAKgD,QAAS,kBAAMD,EAAKjC,YAAYb,UAAWC,IAAQQ,SACtDZ,EAAAC,EAAAC,cAAA,KAAGC,UAAWC,IAAQmD,oBAAtB,MAEEvD,EAAAC,EAAAC,cAAA,QAAMC,UAAWC,IAAQoD,UAAzB,6DAIFxD,EAAAC,EAAAC,cAACkD,EAAA,EAAD,CACEF,QAAS,kBAAMD,EAAKjC,SAASqC,KAAKJ,IAClC9C,UAAWC,IAAQkD,eA1EPG,aAiFPC,sBAAW9C","file":"static/js/6.cbbd547c.chunk.js","sourcesContent":["import React from \"react\";\r\nimport classes from \"./YoutubeComp.css\";\r\n\r\n//Creation of Youtube component which includes video trailer passed trough props\r\nconst YoutubeComp = (props) => {\r\n  return (\r\n    <div className={classes.YoutubeComp}>\r\n      <iframe\r\n        title=\"Youtube\"\r\n        className={classes.dare}\r\n        src={props.url}\r\n        allowFullScreen=\"allowfullscreen\"\r\n        allow=\"autoplay\"\r\n        frameBorder=\"0\"\r\n      ></iframe>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default YoutubeComp;\r\n","import React, { Component } from \"react\";\r\nimport classes from \"./Youtube.css\";\r\nimport YoutubeComp from \"../../components/YoutubeComp/YoutubeComp\";\r\nimport { IoIosCloseCircleOutline } from \"react-icons/io\";\r\nimport axios from \"axios\";\r\nimport { withRouter } from \"react-router-dom\";\r\n\r\nclass Youtube extends Component {\r\n  //Initial state that includes all of the fetched videos array and boolean value whether youtube video exists or not\r\n  state = {\r\n    fetchedVideos: [],\r\n    youtubeExist: false,\r\n  };\r\n\r\n  shouldComponentUpdate(nextProps, nextState) {\r\n    if (nextProps.youtubeExist !== nextState.youtubeExist) {\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n  //Care function will be invoked component has been mounted\r\n  componentDidMount() {\r\n    this.care(this.props.match.params.imdId);\r\n  }\r\n  //After invoking this function, URL will go one page back\r\n  clicking = () => {\r\n    this.props.history.goBack();\r\n  };\r\n  //Function that fetches movies based on passed ID, and provides us with exact details of each movie\r\n  care = (id) => {\r\n    let key = \"a1e70815ed514d294dc936b2f74a2ef3\";\r\n    axios\r\n      .get(\r\n        `https://api.themoviedb.org/3/movie/${id}?api_key=${key}&language=pt-BR&append_to_response=credits,release_dates,videos`\r\n      )\r\n      .then((res) => {\r\n        let fetchMovies = [];\r\n        let results = res;\r\n        //Looping through fetched results and returning youtube video of a movie as a separate value\r\n        results.data.videos.results.map((el) => {\r\n          return (results.youtube = el);\r\n        });\r\n\r\n        results.youtubeFull =\r\n          \"https://www.youtube.com/embed/\" + results.youtube.key;\r\n\r\n        fetchMovies.push(results);\r\n        //Storing our results in array and placing that array into our initial state, while also creating boolean operator to see if there is youtube video or not which will help in making Error handler later\r\n\r\n        this.setState({\r\n          fetchedVideos: fetchMovies,\r\n          youtubeExist: fetchMovies[0].data.video ? false : true,\r\n        });\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n  };\r\n  //Using ternary operator returning Youtube component with exact youtube trailer if variable youtubeExist is true, if its false returning 404 error\r\n  render() {\r\n    return this.state.youtubeExist ? (\r\n      <div onClick={() => this.clicking()} className={classes.Youtube}>\r\n        {this.state.fetchedVideos.map((el) => {\r\n          return <YoutubeComp key={el} url={el.youtubeFull} />;\r\n        })}\r\n        <IoIosCloseCircleOutline\r\n          onClick={() => this.clicking.bind(this)}\r\n          className={classes.icon}\r\n        />\r\n      </div>\r\n    ) : (\r\n      <div onClick={() => this.clicking()} className={classes.Youtube}>\r\n        <p className={classes.youtubeNotExisting}>\r\n          404\r\n          <span className={classes.youtspan}>\r\n            Your youtube link does not exist. Please visit our site.\r\n          </span>\r\n        </p>\r\n        <IoIosCloseCircleOutline\r\n          onClick={() => this.clicking.bind(this)}\r\n          className={classes.icon}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withRouter(Youtube);\r\n"],"sourceRoot":""}